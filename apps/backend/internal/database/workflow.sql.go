// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workflow.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflow (id, user_id, nodes, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, nodes, created_at, updated_at
`

type CreateWorkflowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Nodes     json.RawMessage
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, createWorkflow,
		arg.ID,
		arg.UserID,
		arg.Nodes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Nodes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkflowById = `-- name: GetWorkflowById :one
SELECT id, user_id, nodes, created_at, updated_at FROM workflow WHERE id = $1
`

func (q *Queries) GetWorkflowById(ctx context.Context, id uuid.UUID) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, getWorkflowById, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Nodes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkflowsByUserId = `-- name: GetWorkflowsByUserId :many
SELECT id, user_id, nodes, created_at, updated_at FROM workflow WHERE user_id = $1
`

func (q *Queries) GetWorkflowsByUserId(ctx context.Context, userID uuid.UUID) ([]Workflow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkflowsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workflow
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Nodes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflowById = `-- name: UpdateWorkflowById :one
UPDATE workflow SET nodes = $1, updated_at = $2 WHERE id = $3 RETURNING id, user_id, nodes, created_at, updated_at
`

type UpdateWorkflowByIdParams struct {
	Nodes     json.RawMessage
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateWorkflowById(ctx context.Context, arg UpdateWorkflowByIdParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, updateWorkflowById, arg.Nodes, arg.UpdatedAt, arg.ID)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Nodes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
